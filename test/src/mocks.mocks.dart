// Mocks generated by Mockito 5.4.4 from annotations
// in knock_flutter/test/src/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:convert' as _i8;
import 'dart:typed_data' as _i9;

import 'package:http/http.dart' as _i4;
import 'package:knock_flutter/knock_flutter.dart' as _i2;
import 'package:knock_flutter/src/model/api_response.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:phoenix_socket/phoenix_socket.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiClient_0 extends _i1.SmartFake implements _i2.ApiClient {
  _FakeApiClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserClient_1 extends _i1.SmartFake implements _i2.UserClient {
  _FakeUserClient_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePreferencesClient_2 extends _i1.SmartFake
    implements _i2.PreferencesClient {
  _FakePreferencesClient_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFeedClient_3 extends _i1.SmartFake implements _i2.FeedClient {
  _FakeFeedClient_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKnock_4 extends _i1.SmartFake implements _i2.Knock {
  _FakeKnock_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePhoenixSocket_5 extends _i1.SmartFake implements _i3.PhoenixSocket {
  _FakePhoenixSocket_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_6 extends _i1.SmartFake
    implements _i4.StreamedResponse {
  _FakeStreamedResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeApiResponse_7 extends _i1.SmartFake implements _i5.ApiResponse {
  _FakeApiResponse_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_8 extends _i1.SmartFake implements _i4.Response {
  _FakeResponse_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Knock].
///
/// See the documentation for Mockito's code generation for more information.
class MockKnock extends _i1.Mock implements _i2.Knock {
  @override
  String get apiKey => (super.noSuchMethod(
        Invocation.getter(#apiKey),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#apiKey),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#apiKey),
        ),
      ) as String);

  @override
  String get host => (super.noSuchMethod(
        Invocation.getter(#host),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#host),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#host),
        ),
      ) as String);

  @override
  void authenticate(
    String? userId, [
    String? userToken,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [
            userId,
            userToken,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void logout() => super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isAuthenticated({bool? checkUserToken = false}) => (super.noSuchMethod(
        Invocation.method(
          #isAuthenticated,
          [],
          {#checkUserToken: checkUserToken},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.ApiClient client() => (super.noSuchMethod(
        Invocation.method(
          #client,
          [],
        ),
        returnValue: _FakeApiClient_0(
          this,
          Invocation.method(
            #client,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeApiClient_0(
          this,
          Invocation.method(
            #client,
            [],
          ),
        ),
      ) as _i2.ApiClient);

  @override
  _i2.UserClient user() => (super.noSuchMethod(
        Invocation.method(
          #user,
          [],
        ),
        returnValue: _FakeUserClient_1(
          this,
          Invocation.method(
            #user,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeUserClient_1(
          this,
          Invocation.method(
            #user,
            [],
          ),
        ),
      ) as _i2.UserClient);

  @override
  _i2.PreferencesClient preferences({_i2.PreferencesOptions? options}) =>
      (super.noSuchMethod(
        Invocation.method(
          #preferences,
          [],
          {#options: options},
        ),
        returnValue: _FakePreferencesClient_2(
          this,
          Invocation.method(
            #preferences,
            [],
            {#options: options},
          ),
        ),
        returnValueForMissingStub: _FakePreferencesClient_2(
          this,
          Invocation.method(
            #preferences,
            [],
            {#options: options},
          ),
        ),
      ) as _i2.PreferencesClient);

  @override
  _i2.FeedClient feed(
    String? feedChannelId, {
    _i2.FeedOptions? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #feed,
          [feedChannelId],
          {#options: options},
        ),
        returnValue: _FakeFeedClient_3(
          this,
          Invocation.method(
            #feed,
            [feedChannelId],
            {#options: options},
          ),
        ),
        returnValueForMissingStub: _FakeFeedClient_3(
          this,
          Invocation.method(
            #feed,
            [feedChannelId],
            {#options: options},
          ),
        ),
      ) as _i2.FeedClient);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<String> getFcmToken() => (super.noSuchMethod(
        Invocation.method(
          #getFcmToken,
          [],
        ),
        returnValue: _i7.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #getFcmToken,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #getFcmToken,
            [],
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<String> getApnsToken() => (super.noSuchMethod(
        Invocation.method(
          #getApnsToken,
          [],
        ),
        returnValue: _i7.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #getApnsToken,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #getApnsToken,
            [],
          ),
        )),
      ) as _i7.Future<String>);
}

/// A class which mocks [ApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiClient extends _i1.Mock implements _i2.ApiClient {
  @override
  _i2.Knock get knock => (super.noSuchMethod(
        Invocation.getter(#knock),
        returnValue: _FakeKnock_4(
          this,
          Invocation.getter(#knock),
        ),
        returnValueForMissingStub: _FakeKnock_4(
          this,
          Invocation.getter(#knock),
        ),
      ) as _i2.Knock);

  @override
  _i7.Stream<_i2.ApiClientStatus> get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i7.Stream<_i2.ApiClientStatus>.empty(),
        returnValueForMissingStub: _i7.Stream<_i2.ApiClientStatus>.empty(),
      ) as _i7.Stream<_i2.ApiClientStatus>);

  @override
  _i3.PhoenixSocket get socket => (super.noSuchMethod(
        Invocation.getter(#socket),
        returnValue: _FakePhoenixSocket_5(
          this,
          Invocation.getter(#socket),
        ),
        returnValueForMissingStub: _FakePhoenixSocket_5(
          this,
          Invocation.getter(#socket),
        ),
      ) as _i3.PhoenixSocket);

  @override
  _i7.Future<_i4.StreamedResponse> send(_i4.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i7.Future<_i4.StreamedResponse>.value(_FakeStreamedResponse_6(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i4.StreamedResponse>.value(_FakeStreamedResponse_6(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i7.Future<_i4.StreamedResponse>);

  @override
  _i7.Future<_i5.ApiResponse> doGet(
    String? path, {
    Map<String, dynamic>? queryParams,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #doGet,
          [path],
          {#queryParams: queryParams},
        ),
        returnValue: _i7.Future<_i5.ApiResponse>.value(_FakeApiResponse_7(
          this,
          Invocation.method(
            #doGet,
            [path],
            {#queryParams: queryParams},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.ApiResponse>.value(_FakeApiResponse_7(
          this,
          Invocation.method(
            #doGet,
            [path],
            {#queryParams: queryParams},
          ),
        )),
      ) as _i7.Future<_i5.ApiResponse>);

  @override
  _i7.Future<_i5.ApiResponse> doPut(
    String? path, {
    Map<String, dynamic>? queryParams,
    Object? body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #doPut,
          [path],
          {
            #queryParams: queryParams,
            #body: body,
          },
        ),
        returnValue: _i7.Future<_i5.ApiResponse>.value(_FakeApiResponse_7(
          this,
          Invocation.method(
            #doPut,
            [path],
            {
              #queryParams: queryParams,
              #body: body,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.ApiResponse>.value(_FakeApiResponse_7(
          this,
          Invocation.method(
            #doPut,
            [path],
            {
              #queryParams: queryParams,
              #body: body,
            },
          ),
        )),
      ) as _i7.Future<_i5.ApiResponse>);

  @override
  _i7.Future<_i5.ApiResponse> doPost(
    String? path, {
    Map<String, dynamic>? queryParams,
    Object? body,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #doPost,
          [path],
          {
            #queryParams: queryParams,
            #body: body,
          },
        ),
        returnValue: _i7.Future<_i5.ApiResponse>.value(_FakeApiResponse_7(
          this,
          Invocation.method(
            #doPost,
            [path],
            {
              #queryParams: queryParams,
              #body: body,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.ApiResponse>.value(_FakeApiResponse_7(
          this,
          Invocation.method(
            #doPost,
            [path],
            {
              #queryParams: queryParams,
              #body: body,
            },
          ),
        )),
      ) as _i7.Future<_i5.ApiResponse>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i4.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i4.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i4.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i4.Response>);

  @override
  _i7.Future<_i4.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i4.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i4.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<_i4.Response>);

  @override
  _i7.Future<_i4.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i4.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i4.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i4.Response>);

  @override
  _i7.Future<_i4.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i4.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i4.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i4.Response>);

  @override
  _i7.Future<_i4.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i4.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i4.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i4.Response>);

  @override
  _i7.Future<_i4.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i8.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i7.Future<_i4.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i4.Response>.value(_FakeResponse_8(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i7.Future<_i4.Response>);

  @override
  _i7.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<_i9.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i7.Future<_i9.Uint8List>.value(_i9.Uint8List(0)),
        returnValueForMissingStub:
            _i7.Future<_i9.Uint8List>.value(_i9.Uint8List(0)),
      ) as _i7.Future<_i9.Uint8List>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
